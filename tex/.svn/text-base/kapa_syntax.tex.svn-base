\pagebreak
\section{Syntax for KAPAOOW}\label{sec:kapaSyntax}
When deciding on the syntax for KAPAOOW we had to determine what features we wanted to implement to help the game creators. We focused on  the keywords and block names to try and enhance the readability and learnability of KAPAOOW. We have written our grammar in EBNF and this section splits the EBNF up in parts and explains them individually, for the EBNF as a whole look in Appendix \ref{app:EBNF} The words written in caps are tokens, the token definitions can be found in Appendix \ref{app:tokens}.
\subsection*{EBNF for KAPAOOW}
The start symbol is the \textsf{Program} variable, its production rule is found in rule \eqref{rule:program}. It consists of an optional amount of newlines followed by either a Ruleset or an AI and then an optional amount of newlines.
\begin{equation}\label{rule:program}
\textsf{Program} \lra \textsf{NEWLINE}^\ast \textsf{(Ruleset$|$Ai)}\ \textsf{NEWLINE}^\ast
\end{equation}
\begin{description}
\item[Ruleset \& AI]
\begin{equation}\label{rule:rules}
\textsf{Ruleset} \lra \textsf{RuleBlock}\  (\textsf{NEWLINE}^+\ \textsf{RuleBlock})^\ast
\end{equation}
The rule for \textsf{Ruleset} consists of a mandatory \textsf{RuleBlock} and an optional amount of more Ruleblocks. Each RuleBlock must be separated by one or more newlines. The rule for \textsf{Rules} can be be seen in rule \eqref{rule:rules}.
\begin{eqnarray}\label{rule:ai}
\textsf{AI} & \lra & \textsf{SELECT}\ \textsf{Id}\  [\textsf{NEWLINE}^+ \textsf{StartBlock}]\nonumber\\
& & \indent \hookrightarrow (\textsf{NEWLINE}^+ \textsf{Statement})^\ast
\end{eqnarray}
\begin{equation}
\textsf{Id} \lra \textsf{ID}
\end{equation}
The \textsf{AI} block defines an AI in the game and the rule can be seen in Rule \eqref{rule:ai}, it consists of a keyword \textbf{select} followed by a mandatory \textsf{Id} and an optional \textsf{StartBlock} and an optional amount of \textsf{Statements}. Listing \ref{lst:ai} shows an example of an AI.
\begin{lstlisting}[language=KAPAOOW, caption={An AI block},label=lst:ai]
select Soldier
	// StartBlock
	
	// Statements
\end{lstlisting}
\item[RuleBlock]
\begin{eqnarray}
\textsf{RuleBlock} & \lra & \textsf{AttackTypes}\label{rule:attacktype}\\
 & | & \textsf{StartBlock} \label{rule:startblock}\\
 & | & \textsf{TurnBegins}\label{rule:turnbegins}\\
 & | & \textsf{TurnEnds}\label{rule:turnends}\\
 & | & \textsf{Characters}\label{rule:characters}
\end{eqnarray}
As seen in rules \eqref{rule:attacktype} to \eqref{rule:characters},  \textsf{RuleBlock} can evaluate to five different blocks. 
\begin{equation}\label{rule:attacktypesrule}
\textsf{ATTACKTYPES} \longrightarrow \textsf{NEWLINE}^+\ (\textsf{Id}\  \textsf{NEWLINE}^+)^*\  \textsf{ENDTYPES}
\end{equation}
Rule \eqref{rule:attacktypesrule} describes how to declare different attack types in KAPAOOW. An \textit{attack types} block starts with the keyword \textbf{attack types} and then contains zero or more \textsf{Id}. The block is ended with the keyword \textbf{end types}.
Listing \ref{lst:attacktypes} shows an example of an \textit{attack types} block.
\begin{lstlisting}[language=KAPAOOW, caption={An \textit{attack types} block},label=lst:attacktypes]
attack types
	// Ids
end types
\end{lstlisting}
\begin{eqnarray}
\textsf{StartBlock} & \longrightarrow & \textsf{START}\ \textsf{NEWLINE}^+\ (\textsf{Statement}\ \textsf{NEWLINE}^+)^\ast \nonumber \\
& & \hookrightarrow \textsf{ENDSTART}\label{rule:startblockrule}\\
\textsf{TurnBegins} & \longrightarrow & \textsf{TURNBEGINS}\ \textsf{NEWLINE}^+\ (\textsf{Statement}\ \textsf{NEWLINE}^+)^\ast \nonumber \\
& & \hookrightarrow \textsf{ENDTURN}\label{rule:turnbeginsrule} \\
\textsf{TurnEnds} & \longrightarrow & \textsf{TURNENDS}\ \textsf{NEWLINE}^+\ (\textsf{Statement}\  \textsf{NEWLINE}^+)^\ast \nonumber \\
& & \hookrightarrow \textsf{ENDTURN}\label{rule:turnendsrule}
\end{eqnarray}
The rules \eqref{rule:startblockrule} to \eqref{rule:turnendsrule} all follow the same basic construct - a specific keyword followed by zero or more \textsf{Statement} and they are ended by a specific keyword. Listing \ref{lst:ruleblocks} shows an example of the rule blocks.
\begin{lstlisting}[language=KAPAOOW, caption={Blocks},label=lst:ruleblocks]
start
	// Statements
end start

turn begins
	// Statements
end turn

turn ends
	// Statements
end turn
\end{lstlisting}
\begin{eqnarray}
\textsf{Characters} & \longrightarrow & \textsf{CHARACTERS}\ \textsf{NEWLINE}^+\ (\textsf{Character}\ \textsf{NEWLINE}^+)^\ast \nonumber \\
& & \hookrightarrow \textsf{ENDCHARACTERS}\label{rule:charactersrule}\\
\textsf{Character} & \longrightarrow & \textsf{CHARACTER}\ \textsf{Id}\ \textsf{NEWLINE}^+\ (\textsf{CharStatement}\ \textsf{NEWLINE}^+)^\ast \nonumber \\
& & \hookrightarrow \textsf{ENDCHARACTER}\label{rule:characterrule} \\
\textsf{CharStatement} & \longrightarrow & \textsf{Assignment}\nonumber \\
& | & \textsf{Defend} \nonumber \\
& | & \textsf{Action} \nonumber \\
& | & \textsf{TurnBegins} \nonumber \\
& | & \textsf{TurnEnds}\label{rule:charstatement}
\end{eqnarray}
Rule \eqref{rule:charactersrule} to \eqref {rule:charstatement} defines how to create characters in KAPAOOW. A \textit{characters} block consists of zero or more \textit{character} blocks, and each \textit{character} block consists of a name, and zero or more attributes, \textit{defend} blocks and/or \textit{action} blocks. Listing \ref{lst:characters} shows an example of a \textit{characters} block.
\begin{lstlisting}[language=KAPAOOW, caption={A \textit{characters} block},label=lst:characters]
characters
	character Soldier
		// Assignments
		
		turn begins
			// Statements
		end turn
		
		turn ends
			// Statements
		end turn
		
		// Defends
		// Actions
	end character
end characters
\end{lstlisting}
\begin{equation}\label{rule:assignment}
\textsf{Assignment} \longrightarrow \textsf{Variable}\ \textsf{EQUAL}\ \textsf{Expression}
\end{equation}
An assignment consists of a variable, an equality sign and an expression. The rule can be seen in rule \eqref{rule:assignment}
\begin{eqnarray}
\textsf{Variable} & \longrightarrow & \textsf{Id} \label{rule:attributevar}\\
& | & \textsf{Participant}\ \textsf{DOT}\ \textsf{id} \label{rule:participantvar} \\
& | & \textsf{Value}\nonumber\\
\textsf{Participant} & \lra & \textsf{PLAYER}\nonumber \\
& | & \textsf{ENEMY}\\ 
\textsf{Value} & \lra & \textsf{VALUE}\label{rule:value}
\end{eqnarray}
A variable can be evaluated into one of three specific variables. Rule \eqref{rule:attributevar} can be used when assigning a value to a character attribute. Rule \eqref{rule:participantvar} is used when wanting to assign a new value to either your own attribute or your enemy's attribute. Lastly a variable can also be the keyword \textbf{value} as seen in rule \eqref{rule:value}, \textbf{value} is a special variable that is only used in \textit{defend} statements.
\begin{eqnarray}
\textsf{Expression} & \longrightarrow & \textsf{Term}\ (\textsf{TermOp}\ \textsf{Term})^\ast \label{rule:expression}\\
\textsf{Term} & \longrightarrow & \textsf{Factor}\ (\textsf{FactorOp}\ \textsf{Factor})^\ast\\
\textsf{TermOp} & \longrightarrow & \textsf{PLUS}\\
 & | & \textsf{MINUS}\\
\textsf{Factor} & \longrightarrow & \textsf{LEFTPARENT}\ \textsf{Expression}\ \textsf{RIGHTPARENT}\\
 & | & \textsf{Variable}\\
 & | & \textsf{Decimal}\\
\textsf{FactorOp} & \longrightarrow & \textsf{MULTIPLICATION}\\
 & | & \textsf{DIVISION}\\
 & | & \textsf{MODULUS}\\
\textsf{Decimal} & \longrightarrow & \textsf{DECIMAL}\label{rule:decimal}
\end{eqnarray}
An expression allows the game creator to do calculations on the different variables in the game. An expression can also be a decimal number. The rules for expression can be seen in rules \eqref{rule:expression} to \eqref{rule:decimal}. Listing \ref{lst:assignment} shows an example of assignments, expressions, and variables.
\begin{lstlisting}[language=KAPAOOW, caption={Assignments},label=lst:assignment]
player.health = 150 
enemy.health = 100 

NumOne = player.health
NumTwo = enemy.health

NumOne = NumOne + NumTwo
NumTwo = NumOne - Numtwo
NumOne = (NumOne * NumTwo) / 10
NumTwo = NumOne mod NumTwo
\end{lstlisting}
\item[Statements]
\begin{eqnarray}
\textsf{Statement} & \lra & \textsf{Assignment}\label{rule:assignmentstate}\\
& | & \textsf{If}\label{rule:ifstate}\\
& | & \textsf{From}\label{rule:fromstate}\\
& | & \textsf{While}\label{rule:whilestate}\\
& | & \textsf{Random}\label{rule:randomstate}\\
& | & \textsf{Win}\label{rule:winstate}\\
& | & \textsf{Draw}\label{rule:drawstate}\\
& | & \textsf{Use}\label{rule:usestate}\\
& | & \textsf{Message}\label{rule:messagestate}\\
& | & \textsf{SkipTurn}\label{rule:skipturnstate}\\
& | & \textsf{Damage}\label{rule:damagestate}
\end{eqnarray}
A statement can evaluate into one of several specific statements. 
\begin{eqnarray}
\textsf{If} & \longrightarrow & \textsf{IF}\ \textsf{Conditions}\ \textsf{THEN}\ \textsf{NEWLINE}^+\ (\textsf{Statement} \nonumber\\
& & \indent \hookrightarrow \textsf{NEWLINE$^+$})^\ast\ (\textsf{ElseIf})^\ast\ [\textsf{Else}]\ \textsf{ENDIF}\label{rule:if}\\
\textsf{ElseIf} & \longrightarrow & \textsf{ELSEIF}\ \textsf{Conditions}\ \textsf{THEN}\ \textsf{NEWLINE}^+\nonumber\\ 
& & \indent \hookrightarrow (\textsf{Statement}\ \textsf{NEWLINE$^+$})^\ast\\ 
\textsf{Else} & \longrightarrow  & \textsf{ELSE}\ \textsf{NEWLINE$^+$}\ (\textsf{Statement}\ \textsf{NEWLINE$^+$})^\ast \label{rule:else}
\end{eqnarray}
The \textit{if} statement consists of the keyword \textbf{if} and one or more \textit{Conditions} followed by the keyword \textbf{then} and zero or more \textit{Statements}. Each \textit{if} statement can be followed by one or more \textbf{Else if} blocks, and/or a default block \textit{Else}. The rules for \textit{If}, \textit{ElseIf} and \textit{Else} can be seen in rules \eqref{rule:if} to \eqref{rule:else}. These rules are included to allow the game creator to test a condition and proceed accordingly. Listing \ref{lst:ifstatement} shows an example of an \textit{if} statement.
\begin{lstlisting}[language=KAPAOOW, caption={If statement},label=lst:ifstatement]
if conditions then
	// Statements
else if conditions then
	// Statements
else
	// Statements
end if
\end{lstlisting}
\begin{eqnarray}
\textsf{Conditions} & \lra & \textsf{Condition} (\textsf{BoolOp} \textsf{Condition})^\ast\\
\textsf{BoolOp} & \lra & \textsf{AND}\\
& | & \textsf{OR}
\end{eqnarray}
\textit{Conditions} consists of a \textit{Condition} followed by zero or more conditions separated by \textit{AND} or \textit{OR}.

\begin{eqnarray}
\textsf{Condition} & \longrightarrow & \textsf{LEFTPARENT}\ \textsf{Conditions}\ \textsf{RIGHTPARENT} \label{ruleparentcondition}\\
& | & \textsf{Expression}\ \textsf{ComparisonOp}\ \textsf{Expression}\label{rule:comparisonopcondition}\\
& | & \textsf{Participant}\ (\textsf{EQUALS}|\textsf{IS})\ \textsf{Id} \label{rule:participantcondition}
\end{eqnarray}
A \textit{Condition} can evaluate one of three different conditions which can be seen in rule \eqref{ruleparentcondition} to \eqref{rule:participantcondition}.
\begin{eqnarray}
\textsf{ComparisonOp} & \lra & \textsf{GREATEROREQUALL}\label{rule:greaterorequall}\\
& | & \textsf{GREATEROREQUALR}\\
& | & \textsf{LESSOREQUALL}\\
& | & \textsf{LESSOREQUALR}\\
& | & \textsf{LESSTHAN}\\
& | & \textsf{GREATERTHAN}\\
& | & \textsf{EQUAL}\label{rule:comparisonequal}
\end{eqnarray}
The comparison operator can be evaluate into seven different operators as seen in rule \eqref{rule:greaterorequall} to \eqref{rule:comparisonequal}. Listing \ref{lst:bool} shows an example our boolean operators in use.
\begin{lstlisting}[language=KAPAOOW, caption={Different bool expressions used in an If-statement},label=lst:bool]
HP = 50

if HP >= 60 then
	// Statements
else if HP < 50 then
	// Statements
else if HP = 40 then
	// Statements
else
	// Statements
end if
\end{lstlisting}
\begin{eqnarray}
\textsf{While} & \longrightarrow & \textsf{WHILE}\ \textsf{Conditions}\ \textsf{DO}\ \textsf{NEWLINE}^+\nonumber\\ 
& & \indent \hookrightarrow (\textsf{Statement}\ \textsf{NEWLINE$^+$})^\ast\ \textsf{LOOP}\label{rule:while}\\
\textsf{From} & \longrightarrow & \textsf{Expression}\ \textsf{Direction}\ \textsf{Expression}\nonumber\\ 
& & \indent \hookrightarrow [\textsf{JUMP Expression}]\ \textsf{DO}\ \textsf{NEWLINE}^+ \nonumber\\ 
& & \indent \hookrightarrow (\textsf{Statement}\ \textsf{NEWLINE$^+$})^\ast\ \textsf{NEXT}\label{rule:from}\\
\textsf{Direction} & \lra & \textsf{TO}\nonumber \\
& | & \textsf{DOWNTO}\label{rule:direction}
\end{eqnarray}
Just like If-statements were included to allow a game creator to test conditions, we also included two different loop-statements: \textsf{While} and \textsf{From}. \\
We included the \textsf{While} loop because we want to make it possible for the game creator to make a general loop statement which loops an unspecific number of times, until a given condition is met, this also means that in worst case a \textsf{While} loop will never terminate resulting in an endless loop. The \textsf{From} loop works like \textsf{While} loop, however the main difference is that when using a \textsf{From} loop the game creator is guaranteed that the loop will terminate because the game creator specifies a lower or an upper boundary, which means that it will have a maximum number of times it can loop. It also allows the game creator a more readable structure which is a highly prioritized criteria as mentioned in Section \ref{sec:criteria}. The rules for \textsf{While} and \textsf{From} can be seen in rule \eqref{rule:while} and \eqref{rule:from}.
\begin{lstlisting}[language=KAPAOOW, caption={While loop},label=lst:while]
while conditions do
	// Statements
loop
\end{lstlisting}
\begin{lstlisting}[language=KAPAOOW, caption={From loop},label=lst:from]
from expression to expression do
	// Statements
next
\end{lstlisting}
%%Listing \ref{lst:while} shows a while loop, Listing \ref{lst:from} shows a from loop in KAPAOOW. The \textsf{From} loop works like the For loop\citep{forloop} seen in C\#, except we use the keywords \textbf{to} and \textbf{downto} to define whether the loop will count up or down.
\begin{eqnarray}
\textsf{Random} & \lra & \textsf{Expression}\ \textsf{NEWLINE}^+ (\textsf{Case})^\ast \nonumber \\
& & \indent \hookrightarrow [\textsf{Case}]\ \textsf{ENDRANDOM} \label{rule:random} \\
\textsf{Case} & \lra & \textsf{Expression}\ \textsf{CASE}\ \textsf{NEWLINE}^+ \nonumber \\
& & \indent \hookrightarrow (\textsf{Statement} \textsf{NEWLINE}^+) \label{rule:case}
\end{eqnarray}
Since we are making it possible to fight against an AI or have two AIs fight against each other we needed a way for them to choose their attacks in an irregular pattern. One way to do this was to base an AI's decisions on randomness, so we implemented the \textsf{Random} statement. Rule \eqref{rule:random} describes the \textsf{Random} statement and Listing \ref{lst:random} shows an example of a \textit{random} block.
\begin{lstlisting}[language=KAPAOOW, caption={Random},label=lst:random]
Number = 0
random of 100
	25 cases
		Number = 10
	30 cases
		Number = 20
	17 cases
		Number = 17
	else
		Number = 100
end random
\end{lstlisting}
The way the \textsf{Random} statement works is the game creator chooses which interval they want the random numbers in, and makes zero or more cases. The game creator has to choose the likelihood of a case being executed, by writing an \textit{Expression} in front of each case. The game creator can also make an \textit{Else}, as seen in rule \eqref{rule:else}, in case the random number will not execute any of the other cases.
\begin{eqnarray}
\textsf{Win} & \lra & \textsf{Participant}\ \textsf{WINS}\\ 
\textsf{Draw} & \lra & \textsf{DRAW}
\end{eqnarray}
The \textsf{Win} and \textsf{Draw} statements are very simple. The \textsf{Win} statement is used to tell which player won and the \textsf{Draw} statement is used if the battle is a a draw. Listing \ref{lst:windraw} shows an example of how a game might be won or drawn.
\begin{lstlisting}[language=KAPAOOW, caption={Win and draw},label=lst:windraw]
if Conditions then
	player wins
else
	draw
end if
\end{lstlisting}
\begin{equation}
\textsf{Use} \lra \textsf{USE}\ \textsf{Id}
\end{equation}
The \textsf{Use} statement is used to call the action the game creator wants to perform.
\begin{eqnarray}
\textsf{Message} & \longrightarrow & \textsf{MESSAGESPACE}\ (\textsf{String}|\textsf{Expression})^\ast\label{rule:message}\\
 & | & \textsf{MESSAGE}\nonumber\\
\textsf{String} & \longrightarrow & \textsf{STRING}
\end{eqnarray}
Rule \eqref{rule:message} defines how to make a message in the game. It can for example be used to tell whether a character blocks an attack, makes a critical hit, or wins the game.
\begin{equation}
\textsf{SkipTurn} \lra \textsf{SKIPTURN}
\end{equation}
The \textsf{SkipTurn} statement skips the rest of the current player's turn and makes it the other player's turn. 
\begin{eqnarray}
\textsf{Action} & \lra & \textsf{ACTION}\ \textsf{Id}\ \textsf{NEWLINE}^+\nonumber \\
& & \indent \hookrightarrow (\textsf{Statement}\ \textsf{NEWLINE}^+)^\ast\ \textsf{ENDACTION}
\end{eqnarray}
An \textsf{Action} block is used in characters and is used to define a character's action.
\begin{equation}\label{rule:damage}
\textsf{Damage} \longrightarrow \textsf{DAMAGE}\ \textsf{Variable}\ \textsf{BY}\ \textsf{Expression}\ [\textsf{USING}\ \textsf{Id}]
\end{equation}
Rule \eqref{rule:damage} defines how to damage a variable in KAPAOOW. Each attack is declared with the keyword \textbf{Damage} followed by the variable the game creator wants to damage followed by an \textit{Expression} stating how much damage the attack should do. The game creator is also able to give the attack an attack type.
\begin{eqnarray}
\textsf{Defend} & \longrightarrow & \textsf{DEFEND}\ \textsf{Id}\ [\textsf{FROM}\ \textsf{Id}\ (\textsf{AND}\ \textsf{Id})^\ast]\ \textsf{NEWLINE}^+ \nonumber \\                  
 & & \indent \hookrightarrow (\textsf{Statement}\ \textsf{NEWLINE}^+)^\ast\ \textsf{ENDDEFEND}\label{rule:defend}
\end{eqnarray}
It is also possible to defend your attributes from an attack, this is done by using the \textsf{Defend} block. For the defend block to work, the attack type it defends from, has to match the attack type it is being attacked with, if they match it will execute the body of the defend block. The rule can be seen in rule \eqref{rule:defend}. Listing \ref{lst:damdef} shows an action and a defend block.
\begin{lstlisting}[language=KAPAOOW, caption={An action block and a defend block},label=lst:damdef]
action Fireball
	damage Variable by Expression using Id
end action

defend HP from Magic and Melee
	damage HP by value - 10
end defend
\end{lstlisting}
\end{description}
