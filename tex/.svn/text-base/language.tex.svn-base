A programming language is used to abstract away from machine or assembly code, to create a more readable and understandable code. Through this abstraction it becomes easier to create applications for computers, by doing the translation from code to bits for you, without you ever needing to see the translation. 

When designing our programming language is it important to keep in mind, what the language will be used for, so it can be designed for it, and will ease the process for the game creators to use the language for its intended purpose.

Describing a programming language is  split into two parts, the syntax and the semantics. The syntax describes the form of the language, whereas the semantics describe the meaning.

To achieve a programming language that has a high readability, it is preferable to have the semantics follow directly from the syntax, meaning that the appearance of a statement should also be what the statement is meant to accomplish, an example of this is the $\texttt{while}$ statement in Java:
\begin{center}
\texttt{while} $($\texttt{boolean}\_\texttt{expr}$)$\ \texttt{statement}
\end{center}
The semantics for this statement says that if the current value of the boolean expression is true, then the embedded statement of the $\texttt{while}$ will be executed, otherwise the control will continue after the $\texttt{while}$ construct.

The following two sections will describe the basic theory for syntax and semantics.